func raiseError() {
    return 1 / 0;
}

func reverseArgs(fn) {
    return func(/* args */) {
        var revertedArgs = [];
        for (var i in (_args.count - 1) ... 0) {
            revertedArgs.push(_args[i]);
        }
        return apply(fn, revertedArgs);
    }
}

func compose(/* fns */) {
    if (_args.count < 1) {
        raiseError();
    }
    var lastFn = _args.pop();
    var otherFns = _args;

    return func(/* first fn args */) {
        var result = apply(lastFn, _args);
        for (var i in (otherFns.count - 1) ... 0) {
            var fn = otherFns[i];
            result = fn(result);
        }
        return result;
    }
}

var pipe = reverseArgs(compose);

func curry (arity, fn) {
    var accumulatedArgs = [];
    return func() {
        accumulatedArgs = concat(accumulatedArgs, _args);

        if (accumulatedArgs.count == arity) {
            return apply(fn, accumulatedArgs);
        }
        return _func;
    };
}

func apply (fn, args) {
    if (args.count == 1) return fn(args[0]);
    if (args.count == 2) return fn(args[0], args[1]);
    if (args.count == 3) return fn(args[0], args[1], args[2]);
    if (args.count == 4) return fn(args[0], args[1], args[2], args[3]);
    if (args.count == 5) return fn(args[0], args[1], args[2], args[3], args[4]);
    if (args.count == 6) return fn(args[0], args[1], args[2], args[3], args[4], args[5]);

    return  args.count + ' arguments not supported';
}

func concat(arr1, arr2) {
    var result = [];
    for (var item in arr1) {
        result.push(item);
    }
    for (var item in arr2) {
        result.push(item);
    }
    return result
}

func partial(fn /*...args*/) {
    var argsToApply = [];

    for (var i in 1 ..< _args.count) {
        argsToApply.push(_args[i]);
    }

    return func() {
        var args = concat(argsToApply, _args);
        return apply(fn, args);
    }
}

var map = curry(2, func(fn, data) {
    if (!(fn is Closure)) {
        raiseError();
    }

    var results = [];
    var idx = 0;

    for (var item in data) {
        results[idx] = fn(item, idx);
        idx += 1;
    }

    return results;
});

var filter = curry(2, func(fn, data) {
    if (!(fn is Closure)) {
        raiseError();
    }

    var results = [];
    var idx = 0;

    for (var item in data) {
        if ( fn(item, idx) ) {
            results[idx] = item;
            idx += 1;
        }
    }

    return results;
});


var reduce = curry(3, func(fn, accumulator, data) {
    if (!(fn is Closure)) {
        raiseError();
    }

    var result = accumulator;
    var idx = 0;

    for (var item in data) {
        result = fn(result, item, idx);
        idx += 1;
    }

    return result;
});
